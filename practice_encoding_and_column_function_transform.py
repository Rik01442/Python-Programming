# -*- coding: utf-8 -*-
"""Practice Encoding and Column / Function Transform.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rSF5Fr3NJLpOXw-39d4bj5lzhJXGuqaL
"""

import numpy as np
import pandas as pd

df = pd.read_csv('/content/covid_toy.csv')
df.head()

df.isnull().sum()

from sklearn.impute import SimpleImputer

si=SimpleImputer(strategy='mean')

df['fever']=si.fit_transform(df[['fever']])

df.isnull().sum()

# Label Encoding   --> mostly use for target column
from sklearn.preprocessing import LabelEncoder
lb = LabelEncoder()

df['gender']=lb.fit_transform(df['gender'])
df['city']=lb.fit_transform(df['city'])
df['cough']=lb.fit_transform(df['cough'])
df['has_covid']=lb.fit_transform(df['has_covid'])

df.head()

# Ordinal Encoding  -->

df=pd.read_csv('/content/covid_toy.csv')
df.head()

df.isnull().sum()

from sklearn.impute import SimpleImputer
si = SimpleImputer(strategy='mean')

df['fever']=si.fit_transform(df[['fever']])

df.isnull().sum()

df = df.drop(columns = ['age','fever','city'] ,axis=1)

df.head()

from sklearn.preprocessing import OrdinalEncoder

oe = OrdinalEncoder(categories=[['Male','Female'],['Mild','Strong'],['No','Yes']])

df_new=oe.fit_transform(df)

df_new

# Onehot

df = pd.read_csv('/content/covid_toy.csv')
df.head()

from sklearn.impute import SimpleImputer
si = SimpleImputer(strategy='mean')

df['fever']=si.fit_transform(df[['fever']])

df.isnull().sum()

df.shape

from sklearn.preprocessing import OneHotEncoder

ohe=OneHotEncoder(drop='first',sparse_output = False, dtype=np.int32)

df_new = ohe.fit_transform(df)

df_new

# Get Dummies
x = pd.get_dummies(df, columns=['gender','cough','city','has_covid'],drop_first=True)

x

l=x.astype(int)

l

l.shape

# Column Transform

df = pd.read_csv('/content/covid_toy.csv')

df.head(5)

from sklearn.model_selection import train_test_split

x=df.drop(columns=['has_covid'])
y=df['has_covid']

x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.2)

# Mannually Type column Transform

# Simpleimputer --> fever
from sklearn.impute import SimpleImputer
si = SimpleImputer(strategy='mean')
x_train_fever=si.fit_transform(x_train[['fever']])
x_test_fever=si.fit_transform(x_test[['fever']])

x_train_fever.shape

# Ordinal Encoding --> cough
from sklearn.preprocessing import OrdinalEncoder

oe = OrdinalEncoder(categories=[['Mild','Strong']])
x_train_cough = oe.fit_transform(x_train[['cough']])
x_test_cough = oe.fit_transform(x_test[['cough']])

x_train_cough.shape

# Onehot --> gender city

from sklearn.preprocessing import OneHotEncoder

ohe = OneHotEncoder(drop='first',sparse_output=False)
x_train_gender_city=ohe.fit_transform(x_train[['gender','city']])
x_test_gender_city=ohe.fit_transform(x_test[['gender','city']])

x_train_gender_city.shape

x_train_age=x_train.drop(columns=['gender','city','cough','fever']).values
x_test_age=x_test.drop(columns=['gender','fever','cough','city']).values

x_train_age.shape

x_train_transformed=np.concatenate((x_train_age,x_train_fever,x_train_gender_city,x_train_cough),axis=1)

x_train_transformed.shape

from sklearn.compose import ColumnTransformer
from sklearn.compose import ColumnTransformer

transformer=ColumnTransformer(transformers=[
    ('tnf1',SimpleImputer(),['fever']),
    ('tnf2',OrdinalEncoder(categories=[['Mild','Strong']]),['cough']),
    ('tnf3',OneHotEncoder(sparse_output=False,drop='first'),['gender','city'])
],remainder='passthrough')

transformer.fit_transform(x_train).shape

# Function Transform

import numpy as np
from sklearn.preprocessing import FunctionTransformer

x = np.array([[1,2],[3,4]])
log_transform = FunctionTransformer(np.log1p)
x_transformed = log_transform.transform(x)
print(x_transformed)

# 1> custom feature engineering

import numpy as np
from sklearn.preprocessing import FunctionTransformer
x=np.array([[1,2],[3,4]])
def holi(x):
  return np.hstack((x, x**2))

column_transformer = FunctionTransformer(holi)

x_transformer=column_transformer.transform(x)
print(x_transformer)

import numpy as np
from sklearn.preprocessing import FunctionTransformer
x = np.array([[1,2],[3,4]])
def my_scaling(x):
  return x/np.max(x)

custom = FunctionTransformer(my_scaling)

x_trans = custom.transform(x)

print(x_trans)

import numpy as np
from sklearn.preprocessing import FunctionTransformer
x = np.array([[1,2],[3,np.nan]])
def my_cleaning(x):
  x[np.isnan(x)]=0
  return x

custom = FunctionTransformer(my_cleaning)

x_trans = custom.transform(x)
print(x_trans)

import numpy as np
import pandas as pd

df = pd.read_csv('/content/placement.csv')
df.head()

x = df.drop(columns=['placed'])
y=df['placed']

log_transformed = FunctionTransformer(np.log1p)
x_transformed = log_transformed.transform(x)
x_transformed

import pandas as pd
from sklearn.preprocessing import FunctionTransformer

df = pd.read_csv("/content/covid_toy.csv")
int_list=[]
float_list=[]
object_list=[]

def separate(df):
  for col in df.columns:
    if df[col].dtype =='int64':
      int_list.append(col)
    elif df[col].dtype=='float64':
      float_list.append(col)
    else:
      object_list.append(col)
  return (int_list , float_list , object_list)

transformer=FunctionTransformer(separate)

result = transformer.transform(df)

print('Integer',result[0])
print('Float',result[1])
print('Object',result[2])

from sklearn.preprocessing import LabelEncoder
lb = LabelEncoder()
for i in object_list:
  df[i]=lb.fit_transform(df[i])
df.head(5)

missing_df = df.isnull().sum().reset_index(name='missing')
missing_df

missing_col=[]
for i in df.columns:
  missing=df[i].isnull().sum()
  if missing > 0:
    missing_col.append(i)
print(missing_col)

for i in missing_col:
  if i in int_list:
    from sklearn.impute import SimpleImputer
    si = SimpleImputer(strategy='mean')
    df[i]=si.fit_transform(df[[i]])
  elif i in float_list:
    from sklearn.impute import SimpleImputer
    si = SimpleImputer(strategy='mean')
    df[i]=si.fit_transform(df[[i]])
df.isnull().sum()