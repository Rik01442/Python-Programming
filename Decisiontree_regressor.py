# -*- coding: utf-8 -*-
"""14 feb DecisionTree Regressor.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N1Oj1BvYpLYveCRYJmb2MJFDsh_pou2a
"""

import numpy as np
import pandas as pd

df = pd.read_csv('/content/insurance.csv')

df.head()

df.isnull().sum()

from sklearn.preprocessing import LabelEncoder

lb = LabelEncoder()

df['sex']=lb.fit_transform(df['sex'])
df['smoker']=lb.fit_transform(df['smoker'])
df['region']=lb.fit_transform(df['region'])

df.head()

x = df.drop(columns=['charges'])
y=df['charges']

from sklearn.model_selection import train_test_split

x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.2,
                                                       random_state=42)

from sklearn.tree import DecisionTreeRegressor

dt = DecisionTreeRegressor()

dt.fit(x_train , y_train)

y_pred = dt.predict(x_test)

from sklearn.metrics import r2_score

r2_score(y_test , y_pred)

param_grid = {
    'max_depth': [10, 20, 30, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

from sklearn.model_selection import GridSearchCV

dtree_reg = DecisionTreeRegressor(random_state=42) # Initialize a decision tree regressor
grid_search = GridSearchCV(estimator=dtree_reg, param_grid=param_grid,
                           cv=5, n_jobs=-1, verbose=2, scoring='neg_mean_squared_error')
grid_search.fit(x_train, y_train)

best_dtree_reg = grid_search.best_estimator_
best_dtree_reg

from sklearn.metrics import mean_squared_error

y_pred = best_dtree_reg.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5
best_params = grid_search.best_params_
print(f"Best parameters: {best_params}")
print(f"Test RMSE: {rmse}")

r2_score(y_test,y_pred)

df = pd.read_csv('/content/supply_chain.csv')
df.head()

df.isnull().sum()

df.sample()

df.dtypes

from sklearn.preprocessing import LabelEncoder

lb = LabelEncoder()

categorical = []

for i in df.select_dtypes(include = "object").columns:
    categorical.append(i)
for j in categorical:
    df[j] = lb.fit_transform(df[j])

df.head()

x = df.drop(columns=['Costs'])
y = df['Costs']

from sklearn.model_selection import train_test_split

x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.2,
                                                       random_state=42)

from sklearn.tree import DecisionTreeRegressor

dt = DecisionTreeRegressor()

dt.fit(x_train , y_train)

y_pred = dt.predict(x_test)

from sklearn.metrics import r2_score

r2_score(y_test,y_pred)

param_grid = {
    'max_depth': [10, 20, 30, None],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

from sklearn.model_selection import GridSearchCV

dtree_reg = DecisionTreeRegressor(random_state=42) # Initialize a decision tree regressor
grid_search = GridSearchCV(estimator=dtree_reg, param_grid=param_grid,
                           cv=5, n_jobs=-1, verbose=2, scoring='neg_mean_squared_error')
grid_search.fit(x_train, y_train)

best_dtree_reg = grid_search.best_estimator_
best_dtree_reg

from sklearn.metrics import mean_squared_error

y_pred = best_dtree_reg.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rmse = mse ** 0.5
best_params = grid_search.best_params_
print(f"Best parameters: {best_params}")
print(f"Test RMSE: {rmse}")

r2_score(y_test,y_pred)