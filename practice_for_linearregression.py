# -*- coding: utf-8 -*-
"""Practice for LinearRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15NquBw5lzpzCPMsr3arKHJMvIROQ-G2c
"""

import numpy as np
import pandas as pd

df = pd.read_csv('/content/insurance.csv')
df.head()

df.isnull().sum()

df.head()

from sklearn.preprocessing import LabelEncoder

lb = LabelEncoder()

df['sex']=lb.fit_transform(df['sex'])
df['smoker']=lb.fit_transform(df['smoker'])
df['region']=lb.fit_transform(df['region'])

df.head()

x = df.drop(columns = ['charges'])
y = df['charges']

from sklearn.model_selection import train_test_split

x_train , x_test , y_train , y_test = train_test_split(x,y,test_size=0.2,
                                                       random_state=42)

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(x_train , y_train)

y_pred = lr.predict(x_test)

from sklearn.metrics import r2_score

r2_score(y_test , y_pred)

param_space = {'copy_X': [True,False],
               'fit_intercept': [True,False],
               'n_jobs': [1,5,10,15,None],
               'positive': [True,False]}

from sklearn.model_selection import GridSearchCV
grid_search = GridSearchCV(lr, param_space, cv=5)

grid_search.fit(x_train, y_train)

print(f"Best Score: {grid_search.best_score_}")

df = pd.read_csv('/content/tips.csv')
df.head()

df.isnull().sum()

from sklearn.preprocessing import LabelEncoder

lb = LabelEncoder()

df['sex']=lb.fit_transform(df['sex'])
df['smoker']=lb.fit_transform(df['smoker'])
df['day']=lb.fit_transform(df['day'])
df['time']=lb.fit_transform(df['time'])

df.head()

x = df.drop(columns = ['total_bill'])
y=df['total_bill']

from sklearn.model_selection import train_test_split

x_train , x_test , y_train ,y_test =train_test_split(x,y,test_size=0.2,
                                                     random_state=42)

from sklearn.linear_model import LinearRegression

lr = LinearRegression()

lr.fit(x_train,y_train)

y_pred = lr.predict(x_test)

from sklearn.metrics import r2_score

r2_score(y_test,y_pred)

param_space = {'copy_X': [True,False],
               'fit_intercept': [True,False],
               'n_jobs': [1,5,10,15,None],
               'positive': [True,False]}

from sklearn.model_selection import GridSearchCV
grid_search = GridSearchCV(lr, param_space, cv=5)

grid_search.fit(x_train, y_train)

print(f"Best Score: {grid_search.best_score_}")